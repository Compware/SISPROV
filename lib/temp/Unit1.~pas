unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Grids, Spin, ExtCtrls, JvExForms, JvScrollBox,
  JvExControls, JvLabel;

type
  {$IFDEF WIN32}
    WParameter = LongInt;
  {$ELSE}
    WParameter = Word;
  {$ENDIF}
  LParameter = LongInt;
  TForm1 = class(TForm)
    Button1: TButton;
    Button2: TButton;
    SpinEdit2: TSpinEdit;
    Button3: TButton;
    btMontagrid: TButton;
    sR: TSpinEdit;
    sC: TSpinEdit;
    Button5: TButton;
    Button6: TButton;
    JvLabel1: TJvLabel;
    sbCentro: TJvScrollBox;
    sgDados: TStringGrid;
    sbTopo: TJvScrollBox;
    pnTituloTop: TPanel;
    sbEsq: TJvScrollBox;
    pnTituloLeft: TPanel;
    Bevel1: TBevel;
    procedure ScrollBar1Scroll(Sender: TObject; ScrollCode: TScrollCode;
      var ScrollPos: Integer);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure btMontagridClick(Sender: TObject);
    procedure sgDadosSelectCell(Sender: TObject; ACol, ARow: Integer;
      var CanSelect: Boolean);
    procedure Button5Click(Sender: TObject);
    procedure Button6Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure sbCentroHorizontalScroll(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure sbCentroVerticalScroll(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    function GetWidth(ACol:integer):integer;
    function GetHeight(ARow:integer):integer;
    procedure DesenhaBordas(Area: TCanvas; Rect:TRect);
  end;

type
  TMJvLabel = Class(TJvLabel)
  public
   constructor Create(AOwner: TComponent); Override;
end;


var
  Form1: TForm1;
  OldWindowProc : Pointer;
  OldPosH,OldPosV: integer;

implementation

{$R *.dfm}

procedure TForm1.ScrollBar1Scroll(Sender: TObject; ScrollCode: TScrollCode;
  var ScrollPos: Integer);
begin
  SetScrollPos(sbTopo.Handle,SB_HORZ,ScrollPos,true);
  //sbTopo.HorzScrollBar.Position := ScrollPos;
  //ScrollBox1.HorzScrollBar.Position := ScrollPos;
end;

procedure TForm1.Button1Click(Sender: TObject);
var scrollsize,pagesize:integer;
    scrollproportion,pageproportion:double;
    SI:tagSCROLLINFO;
begin

 with sgDados do
 begin
   si.cbsize := sizeof(si);
   si.fMask := SIF_PAGE or SIF_POS or SIF_RANGE;
   getscrollinfo(Handle, SB_VERT, SI);
   SI.fMask := SIF_PAGE or SIF_RANGE;
   scrollsize := RowCount-FixedRows;
   pagesize := VisibleRowCount-FixedRows;
   if pagesize <> 0 then
     scrollproportion := (scrollsize / pagesize) -1
   else
     scrollproportion:=0;

   if scrollproportion > 0.00001 then
   begin
     pageproportion:= (127 / scrollproportion)+127;
     si.nMax := Round(pageproportion);
     Si.nMin := 0;
     Si.nPage := Si.nMax - 126;
   end
   else
   begin
     Si.nMin := 0;
     Si.nMax := 127;
     Si.nPage := 0;
   end;
   //else
   // SI.nPage := 0;

   SetScrollInfo(Handle, SB_VERT, SI, true);
 end;
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
  //sbCentro.VisibleRowCount
  SetScrollPos(sbCentro.Handle,SB_HORZ,SpinEdit2.Value,true);
end;

procedure TForm1.Button3Click(Sender: TObject);
begin
  SpinEdit2.Value := GetScrollPos(sbCentro.Handle,SB_HORZ);
end;

procedure TForm1.btMontagridClick(Sender: TObject);
var i:integer; pn:array of TMJvLabel;
begin

   sbEsq.Top := sbTopo.Top + sbTopo.Height;
   sbEsq.Left := sbTopo.Left;
   sbCentro.Top := sbEsq.Top;
   sbCentro.Left := sbEsq.Left + sbEsq.Width;

   sgDados.Top := 0;
   sgDados.Left := 0;
   sgDados.Width :=  sgDados.FixedCols * sgDados.DefaultColWidth;

   for i:=0 To sgDados.ColCount-1 do
     sgDados.Width :=  sgDados.Width + sgDados.ColWidths[i];

   sgDados.Height :=  0;

   for i:=0 To sgDados.FixedRows-1 do
     sgDados.Height :=  sgDados.Height + sgDados.DefaultRowHeight;

   for i:=0 To sgDados.RowCount-1 do
     sgDados.Height :=  sgDados.Height + sgDados.RowHeights[i];


   pnTituloTop.Height := sbTopo.Height;
   pnTituloTop.Width := sgDados.Width;
   pnTituloTop.Top := 2;
   pnTituloTop.Left := 0;

   pnTituloLeft.Height := sbEsq.Height;
   pnTituloLeft.Width := sbEsq.Width;
   pnTituloLeft.Top := 0;
   pnTituloLeft.Left := 2;


   //Cabecalho 1
   i:=0;
   SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := sbEsq.Width;
   pn[i].Width := (sgDados.ColWidths[0] + sgDados.ColWidths[1]) +
                  (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'TOTAL GERAL';
   pn[i].Height := 22;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := (sgDados.ColWidths[2] + sgDados.ColWidths[3] + sgDados.ColWidths[4]) +
                  (sgDados.GridLineWidth * 4);
   pn[i].Caption := 'CRIANÇA';
   pn[i].Height := pn[0].Height;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[1].Left + pn[1].Width - sgDados.GridLineWidth;
   pn[i].Width := (sgDados.ColWidths[5] + sgDados.ColWidths[6] + sgDados.ColWidths[7]) +
                  (sgDados.GridLineWidth * 4);
   pn[i].Caption := 'ADULTO';
   pn[i].Height := pn[0].Height;

   //Cabechalho 2
   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[0].Left;
   pn[i].Width := sgDados.ColWidths[0] + sgDados.GridLineWidth;
   pn[i].Caption := 'ACONSELHADO';
   pn[i].Height := 100;
   pn[i].Top := pn[0].Height - 1;
   pn[i].Angle := 90;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'TESTADO';
   pn[i].Height := pn[i-1].Height;
   pn[i].Top := pn[0].Height - 1;
   pn[i].Angle := 90;


   //------------

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'ACONSELHADO';
   pn[i].Height := 100;
   pn[i].Top := pn[1].Height - 1;
   pn[i].Angle := 90;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'TESTADO';
   pn[i].Height := pn[i-1].Height;
   pn[i].Top := pn[1].Height - 1;
   pn[i].Angle := 90;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'POSITIVO';
   pn[i].Height := pn[i-1].Height;
   pn[i].Top := pn[1].Height - 1;
   pn[i].Angle := 90;

   //------------

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'ACONSELHADO';
   pn[i].Height := 100;
   pn[i].Top := pn[1].Height - 1;
   pn[i].Angle := 90;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'TESTADO';
   pn[i].Height := pn[i-1].Height;
   pn[i].Top := pn[1].Height - 1;
   pn[i].Angle := 90;

   inc(i); SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := pn[i-1].Left + pn[i-1].Width - sgDados.GridLineWidth;
   pn[i].Width := sgDados.ColWidths[1] + (sgDados.GridLineWidth * 2);
   pn[i].Caption := 'POSITIVO';
   pn[i].Height := pn[i-1].Height;
   pn[i].Top := pn[1].Height - 1;
   pn[i].Angle := 90;

   //Titulo Esq
   inc(i);
   SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloTop;
   pn[i].Left := 2;
   pn[i].Width := pnTituloLeft.Width - 5;
   pn[i].Caption := 'ANO';
   pn[i].Height := 22 + 100;
   pn[i].Angle := 90;

   //Cabecalho 1 - Esq
   inc(i);
   SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloLeft;
   pn[i].Left := 0;
   pn[i].Top := 0;

   pn[i].Width := pnTituloLeft.Width - 5;
   pn[i].Height := (sgDados.RowHeights[0]) +
                   (sgDados.GridLineWidth * 2);
   pn[i].Caption := '2004';

   inc(i);
   SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloLeft;
   pn[i].Left := 0;
   pn[i].Top := pn[i-1].Top + pn[i-1].Height - sgDados.GridLineWidth;

   pn[i].Width := pn[i-1].Width;
   pn[i].Height := pn[i-1].Height;
   pn[i].Caption := '2005';

   inc(i);
   SetLength(pn,i+1);
   pn[i] := TMJvLabel.Create(Application);
   pn[i].parent := pnTituloLeft;
   pn[i].Left := 0;
   pn[i].Top := pn[i-1].Top + pn[i-1].Height - sgDados.GridLineWidth;

   pn[i].Width := pn[i-1].Width;
   pn[i].Height := pn[i-1].Height;
   pn[i].Caption := '2006';

end;

procedure TForm1.sgDadosSelectCell(Sender: TObject; ACol,
  ARow: Integer; var CanSelect: Boolean);
begin
  sR.Value := ARow;
  sC.Value := ACol;

  sbCentro.HorzScrollBar.Position := GetWidth(ACol);
  sbCentro.VertScrollBar.Position := GetHeight(ARow);
  sbCentroHorizontalScroll(sgDados);
  sbCentroVerticalScroll(sgDados);
end;

function TForm1.GetWidth(ACol:integer):integer;
var i,w:integer;
begin
   w :=  sbEsq.Width;

   for i:=0 To sgDados.FixedCols-1 do
     w :=  w + sgDados.DefaultColWidth;

   for i:=0 To aCol do
     w :=  w + sgDados.ColWidths[i];

   w := w - sbCentro.Width;
   result := w;
end;

function TForm1.GetHeight(ARow:integer):integer;
var i,h:integer;
begin

   h :=  sbTopo.Height;

   for i:=0 To sgDados.FixedRows-1 do
     h :=  h + sgDados.DefaultRowHeight;

   for i:=0 To aRow do
     h :=  h + sgDados.RowHeights[i];

   h := h - sbCentro.Height;
   result := h;
end;

procedure TForm1.DesenhaBordas(Area: TCanvas; Rect: TRect);
var r:TRect; p:TPoint;
begin
  r := Rect;
  with (Area) do
  begin
    Pen.Width := 2;
    Pen.Color := clWhite;
    //Polyline([Point(r.Left,r.top),Point(r.Left,r.Bottom)]);
    Polyline([Point(r.Left,r.top),Point(r.Right-2,r.Top)]);
    Pen.Color := cl3DDkShadow;
    Polyline([Point(r.Left,r.Bottom),Point(r.Right,r.Bottom)]);
    Polyline([Point(r.Right,r.top),Point(r.Right,r.Bottom)]);
  end;
end;

procedure TForm1.Button5Click(Sender: TObject);
//var Conteudo:String; i,x,y,t,hf:integer; al:Word; c:TColor;   r:TRect;
begin
{
   hf := sgDados.Canvas.TextHeight('Lj');

  //Mesclar: Negrito, Centro, Borda
  if (ARow = 0) then // and (ACol in [1..10]) then
  begin

      Case ACol of
        1: begin Posicao[1][0] := Rect; Conteudo := sgDados.Cells[ 1,0]; end;
       11: begin Posicao[2][0] := Rect; Conteudo := sgDados.Cells[11,0]; end;
       21: begin Posicao[3][0] := Rect; Conteudo := sgDados.Cells[21,0]; end;
       31: begin Posicao[4][0] := Rect; Conteudo := sgDados.Cells[31,0]; end;
      end;

      Case ACol of
       10: begin Posicao[1][1] := Rect; end;
       20: begin Posicao[2][1] := Rect; end;
       30: begin Posicao[3][1] := Rect; end;
       40: begin Posicao[4][1] := Rect; end;
      end;

      Case ACol of
       10: i:=1;
       20: i:=2;
       30: i:=3;
       40: i:=4;
      end;

      begin
        r.Left := Posicao[i][0].Left;
        r.Top := Posicao[i][0].Top;
        r.Bottom := Posicao[i][0].Bottom;
        r.Right := Posicao[i][1].Right;
      end;

      //if (ACol in [10,20,30,40]) then
      begin
        sgDados.Canvas.Font.Style:=[fsbold];
        sgDados.Canvas.FillRect(r);
        t := sgDados.Canvas.TextWidth(Conteudo);
        x := r.Left + (((r.Right - r.Left)-t)  div 2);
        y := r.Top  - ((r.Top + hf - r.Bottom) div 2);
        sgDados.Canvas.TextRect(r,x,y,Conteudo);
        DesenhaBordas(sgDados.Canvas,r);
      end;
  end;
}
end;

procedure TForm1.Button6Click(Sender: TObject);
var r:TRect; t,x,y:integer;
begin
  r.Top := 0;
  r.Bottom := sgDados.DefaultRowHeight * sgDados.FixedRows;
  r.Left :=  sgDados.DefaultColWidth * sgDados.FixedCols;
  r.Right := r.Left + sgDados.ColWidths[0] + sgDados.ColWidths[1];

  sgDados.Canvas.Font.Style:=[fsbold];
  sgDados.Canvas.FillRect(r);
  t := sgDados.Canvas.TextWidth('Conteudo');
  x := r.Left + (((r.Right - r.Left)-t)  div 2);
  y := r.Top  - ((r.Top + t - r.Bottom) div 2);
  sgDados.Canvas.TextRect(r,x,y,'Conteudo');
  DesenhaBordas(sgDados.Canvas,r);
end;

//******************************************************************************
function NewWindowProc(WindowHandle : hWnd;
                        TheMessage   : WParameter;
                        ParamW       : WParameter;
                        ParamL       : LParameter) : LongInt
                        {$IFDEF WIN32} stdcall;
                        {$ELSE} ; export; {$ENDIF}
var
  TheRangeMin : integer;
  TheRangeMax : integer;
  TheRange : integer;

begin

  if TheMessage = WM_VSCROLL then
  begin
    {Get the min and max range of the horizontal scroll box}
    GetScrollRange(WindowHandle,
                   SB_HORZ,
                   TheRangeMin,
                   TheRangeMax);
    {Get the vertical scroll box position}
    TheRange := GetScrollPos(WindowHandle,
                             SB_VERT);
    {Make sure we wont exceed the range}
    if TheRange < TheRangeMin then
      TheRange := TheRangeMin else
    if TheRange > TheRangeMax then
      TheRange := TheRangeMax;
    {Set the horizontal scroll bar}
    SetScrollPos(WindowHandle,
                 SB_HORZ,
                 TheRange,
                 true);
  end;

  if TheMessage = WM_HSCROLL then begin


  {Get the min and max range of the horizontal scroll box}
    GetScrollRange(WindowHandle,
                   SB_VERT,
                   TheRangeMin,
                   TheRangeMax);
  {Get the horizontal scroll box position}
    TheRange := GetScrollPos(WindowHandle,
                             SB_HORZ);

  {Make sure we wont exceed the range}
    if TheRange < TheRangeMin then
      TheRange := TheRangeMin else
    if TheRange > TheRangeMax then
      TheRange := TheRangeMax;
  {Set the vertical scroll bar}
    SetScrollPos(WindowHandle,
                 SB_VERT,
                 TheRange,
                 true);
  end;

  { Call the old Window procedure to }
  { allow processing of the message. }
  NewWindowProc := CallWindowProc(OldWindowProc,
                                  WindowHandle,
                                  TheMessage,
                                  ParamW,
                                  ParamL);

end;

procedure TForm1.FormCreate(Sender: TObject);
begin
{ Set the new window procedure for the control }
{ and remember the old window procedure.       }
{
  OldWindowProc := Pointer(SetWindowLong(sgDados.Handle,
                                         GWL_WNDPROC,
                                         LongInt(@NewWindowProc)));
}
  btMontagrid.Click;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
{ Set the window procedure back }
{ to the old window procedure.  }
{
  SetWindowLong(sgDados.Handle,
                GWL_WNDPROC,
                LongInt(OldWindowProc));
}
end;


procedure TForm1.sbCentroHorizontalScroll(Sender: TObject);
var TheRange, DeltaPos:integer;
begin
  TheRange := sbCentro.HorzScrollBar.Position;
  DeltaPos := OldPosH - TheRange;
  pnTituloTop.Left :=  pnTituloTop.Left + DeltaPos;
  OldPosH := TheRange;
end;

{ TMJvLabel }

constructor  TMJvLabel.Create(AOwner: TComponent);
begin
  inherited;
   self.AutoSize := false;
   self.Alignment := taCenter;
   self.Layout := tlCenter;
   self.color := clBtnShadow;
   self.TextEllipsis := tePathEllipsis;
   self.FrameColor := clBlack;
   self.Font.Style := [fsBold];
end;

procedure TForm1.FormShow(Sender: TObject);
begin
   sgDados.Row := 0;
   sgDados.Col := 0;
   sgDados.SetFocus;
end;

procedure TForm1.sbCentroVerticalScroll(Sender: TObject);
var TheRange,DeltaPos:integer;
begin
  TheRange := sbCentro.VertScrollBar.Position;
  DeltaPos := OldPosV - TheRange;
  pnTituloLeft.Top :=  pnTituloLeft.Top + DeltaPos;
  OldPosV := TheRange;
end;

end.
